(= "a "a")
(= "a" "a")
(== "a" "a")
(== :a :a)
(= {:a b :c d} (hash-map :a b :cd))
(= {:a b :c d} (hash-map :a b :c d))
(= {:a 'b :c 'd} (hash-map :a 'b :c 'd))
(= {:a 'b :c 'd} (array-map :a 'b :c 'd))
(class (array-map :a 1 :b 2))
(class (hash-map :a 1 :b 2))
(hash-map :a 1 :b 2)
(array-map :a 1 :b 2)
(array-map :ga "jc" :il "bo")
(hash-map :ga "jc" :il "bo")
(hash-map :ga '1 :il '3)
(assoc (hash-map :ga '1 :il '3) :ak '4)
(doc assoc)
(assoc ['a 'b 'c 'd] 0 'e)
(assoc ['a 'b 'c 'd] 2 'e)
(assoc (hash-map :ga '1 :il '3) :ga '4)
(doc assoc-in)
(def my-map {:a '1 :b '2 :c '3})
(assoc my-map :d '4)
my-map
(assoc my-map :a '34)
my-map
(doc update)
(:a my-map)
(update my-map :b "Hello")
(update my-map :b '33)
(update my-map :b (+ 2 33))
(update my-map :b inc)
my-map
(update my-map :b + 2 33)
(update my-map :b +)
my-map
(assoc my-map :b "hello")
(def my-vec [1 2 3 4])
(doc assoc)
my-vec
(assoc my-vec 0 "Hello")
(assoc my-vec 1 "Hello")
(assoc my-vec 3 "Hello")
(assoc my-vec 4 "Hello")
my-vec
(assoc my-vec 5 "Hello")
(assoc! my-vec 3 "Hello")
(assoc! my-map :b "hello")
(doc assoc!)
(assoc! my-map :w "hello")
(doc update-in)
(update-in my-map :b + 2 33)
(doc update)
(class (hash-map :a '1 :b '2))
(class (array-map :a '1 :b '2))
(doc array-map)
(doc hash-map)
(doc struct-map)
(class (struct-map :a '1 :b '2))
(doc defstruct)
(doc create-struct)
(defstruct my-struct :a :b)
(doc struct-map_
)
(doc struct-map)
(def my-struct-map (struct-map my-struct))
my-struct-map
(def my-struct-map (struct-map my-struct :c '3))
my-struct-map
(def my-struct-map (struct-map my-struct '1 '2))
my-struct-map
(create-struct :q :w)
(def other-struct (create-struct :q :w))
other-struct
my-struct
(keys my-struct)
(doc keys)
(+ Integer/MAX_VALUE 1)
(+' Integer/MAX_VALUE 1)
(+' Integer/MAX_VALUE 0)
(+' Long/MAX_VALUE 0)
(+' Long/MAX_VALUE 1)
(+ Long/MAX_VALUE 1)
(unchecked-add Integer/MAX_VALUE 1)
(unchecked-add Integer/MAX_VALUE 0)
(unchecked-add Long/MAX_VALUE 0)
(unchecked-add Long/MAX_VALUE 1)
(+' Float/MAX_VALUE 0)
(+' Double/MAX_VALUE 0)
(+ Double/MAX_VALUE 0)
(+ Float/MAX_VALUE 0)
(+ Float/MAX_VALUE 1)
(+' Float/MAX_VALUE 1)
(+ Double/MAX_VALUE 1)
(+' Double/MAX_VALUE 1)
(unchecked-add Double/MAX_VALUE 1)
(unchecked-add Float/MAX_VALUE 1)
(unchecked-add Long/MAX_VALUE 1)
(unchecked-add Integer/MAX_VALUE 1)
(unchecked-add Integer/MAX_VALUE 0)
(+ Integer/MAX_VALUE 1)
(+' Integer/MAX_VALUE 1)
(+' Long/MAX_VALUE 1)
(+ Long/MAX_VALUE 1)
(+ Double/MAX_VALUE 1)
(+ Float/MAX_VALUE 1)
(+ Float/MAX_VALUE 0)
(exit)
(def my-map (hash-map :a 1 :b 2 :c 3))
(conj my-map :d 4)
(def my-vec [1 2 3 4])
(conj my-vec 6)
my-vec
(conj! my-vec 5)
(transient my-vec)
(conj! (transient my-vec) 5)
my-vec
(def t-vec (conj! (transient my-vec) 5))
t-vec
(class my-map)
(conj my-map :d 4)
(conj my-map {:d 4})
my-map
(doc conj)
(set 1 2 3 4 4)
(set '(1 2 3 4 4))
(def my-vec [1 2 3 4])
(conj my-vec 5)
my-vec
(def my-list '(1 2 3 4))
(conj my-list 5)
my-list
(def my-set '(1 2 3 4 4))
my-set
(def my-set (set '(1 2 3 4 4)))
my-set
(conj my-set 5)
(conj my-set 3)
my-set
(conj my-set 66)
(conj my-set 22)
(defstruct desilu :fred :ricky)
(struct-map desilu
                :fred n
                :ricky 2
                :lucy 3
                :ethel 4)
(struct-map desilu
                :fred :n
                :ricky 2
                :lucy 3
                :ethel 4)
(def qq
(struct-map desilu
                :fred :n
                :ricky 2
                :lucy 3
                :ethel 4))
(class qq)
(:fred qq)
(:ricky qq)
(doc accessor)
(accessor qq :ricky)
(accessor desilu :fred)
my-vec
(conj 55 my-vc)
(conj 55 my-vec)
(conj my-vec nil)
(conj my-set nil)
(conj my-set false)
(conj my-set true)
(conj my-list true)
(exit)
